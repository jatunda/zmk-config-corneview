/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    require-prior-idle-ms = <125>;
};

&sk {
    quick-release;
    release-after-ms = <500>;
};

&sl {
    release-after-ms = <500>;
    ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        ctrlz {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
            layers = <0>;
            require-prior-idle-ms = <125>;
        };

        ctrlx {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
            layers = <0>;
            require-prior-idle-ms = <125>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
            layers = <0>;
            require-prior-idle-ms = <125>;
        };

        ctrlv {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
            layers = <0>;
            require-prior-idle-ms = <125>;
        };

        cmdz {
            bindings = <&kp LG(Z)>;
            key-positions = <25 26>;
            layers = <1>;
        };

        cmdx {
            bindings = <&kp LG(X)>;
            key-positions = <26 27>;
            layers = <1>;
        };

        cmdc {
            bindings = <&kp LG(C)>;
            key-positions = <27 28>;
            layers = <1>;
            require-prior-idle-ms = <125>;
        };

        cmdv {
            bindings = <&kp LG(V)>;
            key-positions = <28 29>;
            layers = <1>;
            require-prior-idle-ms = <125>;
        };

        toMAC {
            bindings = <&to 1>;
            key-positions = <39 41 30>;
            layers = <0>;
        };

        toGAME {
            bindings = <&to 6>;
            key-positions = <39 41 30>;
            layers = <1>;
        };

        toSUDOKU {
            bindings = <&to 8>;
            key-positions = <39 41 30>;
            layers = <6>;
        };

        toWIN {
            bindings = <&to 0>;
            key-positions = <39 41 30>;
            layers = <8>;
        };

        bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <38 36 29>;
        };

        mac_app_allwindows {
            bindings = <&kp LC(DOWN)>;
            key-positions = <31 32 33>;
            layers = <1>;
            require-prior-idle-ms = <125>;
        };

        combo_LT {
            bindings = <&kp LT>;
            key-positions = <31 32>;
            require-prior-idle-ms = <100>;
        };

        combo_GT {
            bindings = <&kp GT>;
            key-positions = <32 33>;
            require-prior-idle-ms = <100>;
        };

        combo_QMark {
            bindings = <&kp QMARK>;
            key-positions = <33 34>;
            require-prior-idle-ms = <100>;
        };

        combo_COLON {
            bindings = <&kp COLON>;
            key-positions = <22 21>;
            require-prior-idle-ms = <100>;
        };

        combo_DQT {
            bindings = <&kp DQT>;
            key-positions = <10 9>;
            require-prior-idle-ms = <100>;
        };

        combo_nextWindowMac {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <7 8>;
            layers = <1 4>;
            require-prior-idle-ms = <125>;
        };

        hyper-right {
            bindings = <&kp LS(LA(LC(LEFT_GUI)))>;
            key-positions = <19 20 21 22>;
        };

        ctrlvAlternate {
            bindings = <&kp LC(V)>;
            key-positions = <28 15>;
            require-prior-idle-ms = <125>;
            layers = <0>;
        };

        cmdvAlternate {
            bindings = <&kp LG(V)>;
            key-positions = <28 15>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };

        toWin_everywhere {
            bindings = <&to 0>;
            key-positions = <16 3 14>;
            require-prior-idle-ms = <125>;
        };

        toMac_everywhere {
            bindings = <&to 1>;
            key-positions = <8 19 21>;
            require-prior-idle-ms = <125>;
        };

        toGAME_everywhere {
            bindings = <&to 6>;
            key-positions = <2 15 13>;
            require-prior-idle-ms = <125>;
        };

        toSUDOKU_everywhere {
            bindings = <&to 8>;
            key-positions = <9 20 22>;
            require-prior-idle-ms = <125>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <29 27 36>;
        };
    };

    macros {
        arrowsUp: arrowsUp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP>;
            label = "ARROWSUP";
            wait-ms = <1>;
            tap-ms = <10>;
        };

        arrowsDown: arrowsDown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
            label = "ARROWSDOWN";
            wait-ms = <1>;
            tap-ms = <10>;
        };
    };

    behaviors {
        td_alt_game2: td_alt_game2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_GAME2";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&mo 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Win {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB                &kp Q           &kp W           &kp E             &kp R        &kp T          &kp Y        &kp U        &kp I              &kp O           &kp P                    &kp APOS
&kp DELETE             &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_SHIFT D  &mt LCTRL F  &mt LCTRL G    &mt RCTRL H  &mt RCTRL J  &mt RIGHT_SHIFT K  &mt LEFT_ALT L  &mt RIGHT_GUI SEMICOLON  &kp ENTER
&mt LEFT_SHIFT ESCAPE  &kp Z           &kp X           &kp C             &kp V        &kp B          &kp N        &kp M        &kp COMMA          &kp DOT         &kp FSLH                 &kp BACKSPACE
                                                       &kp LCTRL         &sl 2        &sk LSHFT      &kp SPACE    &mo 3        &kp LEFT_WIN
            >;

            label = "WIN";
        };

        Mac {
            bindings = <
&trans  &trans       &trans  &trans            &trans          &trans            &trans           &trans          &trans            &trans  &trans               &trans
&trans  &mt RCTRL A  &trans  &trans            &mt LEFT_GUI F  &mt LEFT_GUI G    &mt RIGHT_GUI H  &mt LEFT_GUI J  &trans            &trans  &mt RCTRL SEMICOLON  &trans
&trans  &trans       &trans  &trans            &trans          &trans            &trans           &trans          &trans            &trans  &trans               &trans
                             &kp LEFT_COMMAND  &trans          &trans            &trans           &mo 4           &kp LEFT_CONTROL
            >;

            label = "MAC";
        };

        Sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans    &kp EXCL        &kp AT           &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
&trans    &kp N1          &kp N2           &kp N3    &kp N4      &kp N5         &kp N6     &kp N7     &kp N8     &kp N9                &kp N0                 &trans
&kp PIPE  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LBKT  &kp RBKT    &kp UNDER      &kp PLUS   &kp MINUS  &kp EQUAL  &kp TILDE             &kp BSLH               &trans
                                           &trans    &trans      &trans         &trans     &trans     &trans
            >;

            label = "SYM";
        };

        NavWin {
            bindings = <
&none  &kp F11   &kp F12          &kp LC(EQUAL)  &kp LS(LA(LC(R)))  &kp LS(LA(LC(T)))    &arrowsUp    &kp HOME        &kp UP_ARROW       &kp END        &kp C_MUTE        &kp C_VOL_UP
&none  &mkp MB4  &kp LC(LS(TAB))  &kp LC(MINUS)  &kp LC(TAB)        &mkp MB5             &arrowsDown  &kp LEFT_ARROW  &kp DOWN_ARROW     &kp RIGHT      &kp C_PLAY_PAUSE  &kp C_VOL_DN
&none  &kp F1    &kp F2           &kp F3         &kp F4             &kp F5               &kp F6       &kp LA(LEFT)    &kp LS(LA(LC(X)))  &kp LA(RIGHT)  &kp C_PREVIOUS    &kp C_NEXT
                                  &trans         &trans             &trans               &trans       &trans          &trans
            >;

            label = "NAVWIN";
        };

        NavMac {
            bindings = <
&none  &kp F11   &kp F12          &kp LG(EQUAL)  &kp LS(LA(LC(R)))  &kp LS(LA(LC(T)))    &arrowsUp    &kp LG(LEFT_ARROW)  &kp UP_ARROW       &kp LG(RIGHT)  &kp C_MUTE        &kp C_VOL_UP
&none  &mkp MB4  &kp LC(LS(TAB))  &kp LG(MINUS)  &kp LC(TAB)        &mkp MB5             &arrowsDown  &kp LEFT_ARROW      &kp DOWN_ARROW     &kp RIGHT      &kp C_PLAY_PAUSE  &kp C_VOL_DN
&none  &kp F1    &kp F2           &kp F3         &kp F4             &kp F5               &kp F6       &kp LA(LEFT)        &kp LS(LA(LC(X)))  &kp LA(RIGHT)  &kp C_PREVIOUS    &kp C_NEXT
                                  &trans         &trans             &trans               &trans       &trans              &trans
            >;

            label = "NAVMAC";
        };

        HYPER {
            bindings = <
&kp TAB  &kp LS(LA(LC(LG(Q))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LA(LG(LC(LS(T))))    &kp LS(LA(LC(LG(Y))))  &kp LG(LEFT_ARROW)     &kp LS(LA(LC(LG(I))))      &kp LG(RIGHT)            &kp LS(LA(LC(LG(P))))     &kp APOS
&kp DEL  &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(G))))    &kp LS(LA(LC(LG(H))))  &kp LS(LG(LEFT))       &kp LS(LA(LC(LG(K))))      &kp LS(LG(RIGHT))        &kp LS(LA(LC(LG(SEMI))))  &kp RET
&kp ESC  &kp LS(LC(LA(LG(Z))))  &kp LS(LA(LC(LG(X))))  &kp LS(LA(LC(LG(C))))  &kp LS(LA(LC(LG(V))))  &kp LS(LA(LC(LG(B))))    &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(M))))  &kp LS(LA(LC(LG(COMMA))))  &kp LS(LA(LC(LG(DOT))))  &kp LS(LA(LC(LG(FSLH))))  &kp BSPC
                                                       &trans                 &trans                 &trans                   &trans                 &trans                 &trans
            >;

            label = "HYPER";
        };

        Gaming {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R          &kp T        &kp Y      &kp U            &kp I         &kp O    &kp P     &kp SQT
&kp TAB    &kp A  &kp S  &kp D      &kp F          &kp G        &kp H      &kp J            &kp K         &kp L    &kp SEMI  &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V          &kp B        &kp N      &kp M            &kp COMMA     &kp DOT  &kp FSLH  &kp BACKSPACE
                         &kp LCTRL  &td_alt_game2  &kp SPACE    &kp SPACE  &kp RIGHT_SHIFT  &kp LEFT_GUI
            >;

            label = "GAMING";
        };

        GAME_2 {
            bindings = <
&kp GRAVE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &none   &none     &kp UP_ARROW  &none      &kp C_MUTE        &kp C_VOL_UP
&trans     &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &kp C_PLAY_PAUSE  &kp C_VOL_DN
&trans     &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans    &trans        &trans     &kp C_PREV        &kp C_NEXT
                           &trans  &trans  &trans    &trans  &trans    &trans
            >;

            label = "GAME 2";
        };

        Sudoku {
            bindings = <
&kp TAB             &kp LC(Y)  &kp N7  &kp N8  &kp N9        &kp Z    &none      &none           &kp UP_ARROW  &none      &none  &none
&kp DELETE          &kp LC(Z)  &kp N4  &kp N5  &kp NUMBER_6  &kp X    &none      &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &none  &kp ENTER
&mt LEFT_SHIFT ESC  &kp N0     &kp N1  &kp N2  &kp N3        &kp C    &none      &none           &none         &none      &none  &kp BACKSPACE
                                       &none   &kp V         &none    &kp SPACE  &none           &none
            >;

            label = "SUDOKU";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        WIN_ULTRA {
            if-layers = <2 3>;
            then-layer = <5>;
        };

        MAC_ULTRA {
            if-layers = <2 4>;
            then-layer = <5>;
        };
    };
};
